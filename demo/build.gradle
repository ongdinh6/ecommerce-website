import nu.studer.gradle.jooq.JooqEdition
import org.jooq.meta.jaxb.Logging


buildscript {
    configurations['classpath'].resolutionStrategy.eachDependency {
        if (requested.group.startsWith('org.jooq') && requested.name.startsWith('jooq')) {
            useVersion '3.17.3'
        }
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'nu.studer.jooq' version '9.0'
    id 'org.liquibase.gradle' version '2.0.4'
}

def DB_URL = System.getenv("DB_URL")
def DB_NAME = System.getenv("DB_NAME")
def DB_USERNAME = System.getenv("DB_USERNAME")
def DB_PASSWORD = System.getenv("DB_PASSWORD")

group = 'vn.omdinh'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

jooq {
    version = '3.19.1'
    edition = JooqEdition.OSS

    configurations {
        main {  // name of the jOOQ configuration
            generationTool {
                logging = Logging.WARN
                jdbc {
                    driver = 'org.mariadb.jdbc.Driver'
                    url = DB_URL
                    user = DB_USERNAME
                    password = DB_PASSWORD
                    properties {
                        property {
                            key = 'ssl'
                            value = 'false'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.mariadb.MariaDBDatabase'
                        excludes = 'databasechangelog|databasechangeloglock'
                        inputSchema = DB_NAME
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'vn.omdinh'
                        directory = 'build/generated/jooq/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }

    liquibase {
        extendsFrom configurations.compileClasspath
        extendsFrom configurations.runtimeClasspath
    }
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok'
    compileOnly 'org.projectlombok:lombok'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // spring-web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-mustache'
    implementation 'org.springframework.boot:spring-boot-starter-security:3.2.8'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // jooq
    jooqGenerator 'org.mariadb.jdbc:mariadb-java-client:3.3.3'
    jooqGenerator 'org.slf4j:slf4j-api:2.0.9'

    // data
    implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.3'

    // liquibase
    implementation 'org.liquibase:liquibase-core:4.29.0'
    liquibaseRuntime 'org.liquibase:liquibase-core:4.29.0'
    liquibaseRuntime 'info.picocli:picocli:4.6.1' // Required for Liquibase CLI
    liquibaseRuntime sourceSets.main.output
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client:3.3.3'

    // test
    testImplementation 'org.springframework.security:spring-security-test:6.3.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

task updateDatabase(type: JavaExec) {
    classpath = configurations.liquibase
    mainClass.set('liquibase.integration.commandline.Main')
    args = [
        "--url=${DB_URL}",
        "--username=${DB_USERNAME}",
        "--password=${DB_PASSWORD}",
        "--changeLogFile=src/main/resources/db/changelog/db.changelog-master.yaml",
        "update",
    ]
}

tasks.named('test') {
    useJUnitPlatform()
}

tasks.test.dependsOn('updateDatabase')

tasks.named('generateJooq').configure {
    allInputsDeclared = true
}

